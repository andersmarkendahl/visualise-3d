#! /bin/bash
##
##	Script for the visualise-3d
##
##		release <major|minor|overwrite>
##

# Helper functions
Log() {
	echo "$(date +"%T"): $*" >&2
}
Die() {
	echo "ERROR: $*" >&2
	exit 1
}
Help() {
	grep '^##' $0 | cut -c3-
	exit 0
}
CreateDir() {
	mkdir -p $1 || Die "$1, unable to create dir"
}
CheckExec() {
	test -x $1 || Die "$1 is not executable"
}
CheckRead() {
	test -r $1 || Die "$1 is not readable"
}
GetBundleVersion() {
	echo $(grep bundleVersion $projSettings | awk '{print $2}')
}

#	RunVersion
#		Update version in ProjectSettings
#		Requires: __releaseType
RunVersion() {
	# Argument check
	test -n "$__releaseType" || Die "${FUNCNAME[0]}: No releaseType defined"

	$UNITY_EDITOR -batchmode -quit -projectPath $topRepo \
		-logFile /tmp/version-logs.txt \
		-executeMethod MacOS.Version || Die "Failed version update, check /tmp/version-logs.txt"
}

#	RunBuild
#		Build and generate debug symbols
#		Requires: __targetDir, __targetFile
RunBuild() {
	# Argument check
	test -n "$__targetDir" || Die "${FUNCNAME[0]}: No target directory defined"
	test -n "$__targetFile" || Die "${FUNCNAME[0]}: No target file defined"

	$UNITY_EDITOR -batchmode -quit -projectPath $topRepo \
		-logFile $__targetDir/build-logs.txt \
		-executeMethod MacOS.Build || Die "Failed build, check $__targetDir/build-logs.txt"
}

#	RunRepoUpdate
#		Update version in Unity, tag in Git
#		Pushes change in Git
#
RunRepoUpdate() {
	test -n "$__releaseType" || Die "${FUNCNAME[0]}: No releaseType defined"
	test -n "$1" || Die "${FUNCNAME[0]}: No bundleVersion defined"
	bundleVersion=$1

	# Commit and push
	git add $projSettings || Die "Failed to stage change"
	git commit -m "Release: $bundleVersion" || Die "Failed to commit change"
	git push origin main || Die "Failed to push change"
	git tag "v$bundleVersion" || Die "Failed to tag"
	git push --tags || Die "Failed to push tag"
}
#-----------------------
# Execution starts here
#-----------------------

# Print Help section
test -n "$1" || Help
echo "$1" | grep -qi "^help\|-h" && Help

# Get base info
topRepo=$(git rev-parse --show-toplevel)
projSettings="$topRepo/ProjectSettings/ProjectSettings.asset"
timeStamp=$(date +"%H_%M_%S")

##	Environment variables;
##
##		UNITY_EDITOR: Unity Editor path ($HOME/Unity/Hub/Editor/2020.3.33f1/Editor/Unity)
test -n "${UNITY_EDITOR+1}" || export UNITY_EDITOR="$HOME/Unity/Hub/Editor/2020.3.33f1/Editor/Unity"
##		UNITY_LICENSE: Unity License path ($HOME/Unity_v2020.3.33f1.ulf.enc)
test -n "${UNITY_LICENSE+1}" || export UNITY_LICENSE="$HOME/Unity_v2020.3.33f1.ulf.enc"

# Sanity check and set up environment settings
CheckExec $UNITY_EDITOR
CheckRead $UNITY_LICENSE
base64 --decode $UNITY_LICENSE &>/dev/null || Die "License file not in encoded format"

# Set release type from argument
case "$1" in
major)
	export __releaseType=$1
	;;
minor)
	export __releaseType=$1
	;;
patch)
	export __releaseType=$1
	;;
overwrite)
	export __releaseType=$1
	;;
*)
	Die "Unknown release type: $1 (major|minor|patch)"
	;;
esac

# Get old version (just for log)
bundleVersion=$(GetBundleVersion)
# Update version based on releaseType
Log "Versioning..."
Log "Version previous: $bundleVersion"
RunVersion || Die "Version failed"
# Get new version
bundleVersion=$(GetBundleVersion)
Log "Versioning Passed"
Log "Version new: $bundleVersion"

# Set version-specific environment variables
export __targetDir="$HOME/visualise-3d-builds/v$bundleVersion-$timeStamp"
export __targetFile="visualise-3d-$bundleVersion"
CreateDir $__targetDir

Log "Testing Passed"
Log "Building..."
RunBuild || Die "Build failed"
Log "Building Passed"
RunRepoUpdate $bundleVersion || Die "RepoUpdate failed"
Log "Release Passed: $__targetDir"
